<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Data science tutorials</title>
    <link>https://addurl/</link>
    <atom:link href="https://addurl/index.xml" rel="self" type="application/rss+xml"/>
    <description>This blog aims demonstrating various data analysis techniques in a 
practical way.
</description>
    <generator>Distill</generator>
    <lastBuildDate>Fri, 02 Sep 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Product Analysis report</title>
      <dc:creator>Linus Agbleze</dc:creator>
      <link>https://addurl/posts/2022-09-03-product-analysis-report</link>
      <description>


&lt;h3 id="background"&gt;Background&lt;/h3&gt;
&lt;p&gt;The company is a startup offering an innovative product that is transforming commercial real estate monitoring and management. Its target market is the commercial real estate industry. In order to stay in business, it is not enough to access the market by landing demo request but more essentially turn those requests into conversions and increase conversion rate. Thus, the main goal of the product team is started as follows;&lt;/p&gt;
&lt;h3 id="product-team-goal-for-analysis"&gt;Product team goal for analysis&lt;/h3&gt;
&lt;p&gt;To increase conversion from demo request to contract signing&lt;/p&gt;
&lt;h3 id="business-problem-statement"&gt;Business Problem statement&lt;/h3&gt;
&lt;h4 id="problem-statement-1-assessing-the-relationship-between-sales-script-type-and-conversion"&gt;Problem statement 1: Assessing the relationship between sales script type and conversion&lt;/h4&gt;
&lt;p&gt;The product team aims at undertaking a data-based decision making to achieve its goal. To achieve that, data has been collected to be analyzed to gain insights. The challenge is to investigate how various variables influence our goal by asking the right business questions.&lt;/p&gt;
&lt;p&gt;We have been using different scripts during the demo sessions and as expected not all demo sessions result in conversion. We will want to understand if there is any trend and factor contributing to conversion that needs to be maximized and manage any other factor detrimental to conversion. This is one of our business problems to be analyzed. Given the fact that sales script was one of the tools used during the demo session, we are tempted to hypothesize it is associated with conversion. This understanding have been translated into the following analytical framework for further assessment.&lt;/p&gt;
&lt;h4 id="null-hypothesis-h0-there-is-no-relationship-between-type-of-sales-script-and-conversion"&gt;Null Hypothesis (H0): There is no relationship between type of sales script and conversion&lt;/h4&gt;
&lt;h4 id="alternative-hypothesis-h1-there-is-a-relationship-between-type-of-sales-script-and-conversion"&gt;Alternative Hypothesis (H1): There is a relationship between type of sales script and conversion&lt;/h4&gt;
&lt;h4 id="problem-statement-2-assessing-difference-in-total-conversions-made-by-different-sales-scripts"&gt;Problem statement 2: Assessing difference in total conversions made by different sales scripts&lt;/h4&gt;
&lt;p&gt;Each of the sales script used during the demo session has produce some conversion. While the total conversion for each script can be easily assessed, we need to go beyond that and assess if there is any difference and more importantly if the difference in conversion is significant to suggest a preference for one of them to increase the chances of achieving higher conversion. This need not be a guesswork but data driven hence have been translated into the following hypothesis for analysis;&lt;/p&gt;
&lt;h4 id="null-hypothesis-h0-difference-in-mean-conversion-among-all-sales-scripts-is-equal"&gt;Null hypothesis (H0): Difference in mean conversion among all sales scripts is equal&lt;/h4&gt;
&lt;h4 id="alternative-hypothesis-h1-there-is-difference-in-mean-conversion-for-at-least-one-of-sales-scripts"&gt;Alternative hypothesis (H1): There is difference in mean conversion for at least one of sales scripts&lt;/h4&gt;
&lt;h4 id="problem-statement-3-to-sales-scripts-that-produces-significantly-higher-conversions"&gt;Problem statement 3: To sales scripts that produces significantly higher conversions&lt;/h4&gt;
&lt;p&gt;The result for the hypothesis stated above will determine whether or not there is the need for further enquiry in the form of post-hoc test. If the analysis results in rejection of the null hypothesis, then there will be the need to assess how the different sales scripts compare to each other in order to identify which of the sales scripts produce significantly higher mean conversion.&lt;/p&gt;
&lt;h4 id="problem-statement-4-assessing-factors-that-influence-the-decision-of-a-client-to-convert"&gt;Problem statement 4: Assessing factors that influence the decision of a client to convert&lt;/h4&gt;
&lt;p&gt;For our success, the higher the amount of conversions, the better. The business problem at hand is to understand the drivers of conversion. The decision by a client to purchase our product or not during or after a demo session is one that needs to be better understood so we can do more of what makes them convert and less of what deter them from buying our products. This problem requires a deep dive into our data to carefully assess how the various factors for which data is available are playing a role.&lt;/p&gt;
&lt;h3 id="business-questions-to-answer"&gt;Business questions to answer&lt;/h3&gt;
&lt;p&gt;Based on the the business problem statements conceptualized, this analysis is undertaken to provide answers to the following business questions as a guide.&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Is there a significant relationship between type of sales script and conversion?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are all sales scripts achieving a similar amount of conversions?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do sales scripts compare in terms of conversions and which sales scripts can be used to achiever higher conversions?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do various factors influence the probability of a client to sign-up for our product?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="business-objectives"&gt;Business objectives&lt;/h3&gt;
&lt;p&gt;To define the data analysis tasks, the business questions are translated into objectives as follows&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;To test the hypothesis that there is a statistically significant relationship between type of sales script and conversion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To test the hypothesis that difference in mean conversion among sales script are equal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To assess and identify which sales script produces higher total conversions on the average if any&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To assess various potential drivers of conversion and understand their influence&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="data-analysis-task"&gt;Data analysis task&lt;/h3&gt;
&lt;p&gt;This section details the procedure used to analyzed the data to derive insights and draw recommendations. First of all it is important to highlight some of the formula used.&lt;/p&gt;
&lt;h4 id="formula-used"&gt;Formula used&lt;/h4&gt;
&lt;p&gt;Conversion rate (ะก1) = [N of contracts signed] / [N of Demo requests] * 100&lt;/p&gt;
&lt;p&gt;Conversion rate for script = (Total conversions where script was used) / (Total number of demo sessions where script was used)&lt;/p&gt;
&lt;h4 id="assumptions"&gt;Assumptions&lt;/h4&gt;
&lt;p&gt;In order to make results reproducible and understandable for contextualized interpretation, much effort is made to lay bare assumptions that may influence how proper insights is drawn. Some of these assumptions are required for the statistical analysis undertaken to hold true. These are highlighted in this section as follows.&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Scripts were used independently, that is a single script was applied for a client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All scripts were used for approximately the same time period. It is however realized from the data that the first demo appointment session for which script C was used was on 2020-01-08 16:50:35 and the last date of use was 2021-03-01 19:40:01. For script A, it was first used for a demo session on 2019-12-28 03:57:38 and its last usage was on 2021-03-29 12:44:07. Script B was first used for a demo session on 2019-12-28 11:38:55 and last used was on 2021-03-06 16:57:21. Thus, data exploration shows some differences in date of first usage and last usage of script but this difference is assummed to be negligible in order to compare the mean conversions among them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="data-exploration"&gt;Data exploration&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)
library(readr)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;## Identify the categories of sales scripts
df.sales_script_variant.unique()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;## get description of the variables in the data

df.info()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;## shows the shape of the data -- number of rows and columns
df.shape&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;## Cast the data into DplyFrame in order to use dplython functions on it.

df_dataframe = DplyFrame(df)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="estimating-total-number-of-conversions-for-the-whole-period-covered"&gt;Estimating total number of conversions for the whole period covered&lt;/h3&gt;
&lt;h5 id="keywords"&gt;Keywords&lt;/h5&gt;
&lt;h5 id="non-conersion-are-cases-where-the-client-did-not-sign-up-during-and-after-the-demo-session"&gt;Non-conersion are cases where the client did not sign up during and after the demo session&lt;/h5&gt;
&lt;p&gt;Given that our goal is to increase conversion, the analysis will centered around that. First, the total number of conversion is estimated and compared to non-conversion&lt;/p&gt;
&lt;p&gt;From the analysis below, total number of conversion was 5,018 which is slightly higher than non-conversion of 4,982. The sum of both conversion and non-conversion equates to the total number of requests made.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;## select some columns needed to estimating conversion
#(df_dplyselect = df_dataframe &amp;gt;&amp;gt; siuba.select(_.is_signed, _.conversion, _.sales_script_type, #_.request_to_1streach_timelength_minutes_, _.company_group))
 
df_dplyselect = df_dataframe[[&amp;#39;is_signed&amp;#39;, &amp;#39;conversion&amp;#39;, &amp;#39;sales_script_type&amp;#39;, &amp;#39;request_to_1streach_timelength_minutes_&amp;#39;, &amp;#39;company_group&amp;#39;]]    
## Group data based on conversion column and count number of conversion
#conversion_total = df_dplyselect &amp;gt;&amp;gt; group_by(X.conversion) &amp;gt;&amp;gt; summarize(total_conversion = #X.conversion.count())&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;df_dplyselect = df_dplyselect.groupby(&amp;#39;conversion&amp;#39;)[[&amp;#39;conversion&amp;#39;]].count()#.reset_index()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;df_dplyselect&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;conversion_total = df_dplyselect.copy().rename(columns={&amp;#39;conversion&amp;#39;: &amp;#39;total_conversion&amp;#39;}).reset_index()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;conversion_total
#df_dplyselect&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;(ggplot(conversion_total, aes(x=&amp;#39;conversion&amp;#39;, y=&amp;#39;total_conversion&amp;#39;))
 + geom_col(stat = &amp;#39;identity&amp;#39;) + ggtitle(&amp;#39;Bar chart of Total Conversion and non-conversion&amp;#39;) + theme_light()
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://addurl//posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-1.png" width="614" /&gt;&lt;/p&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="estimating-c1"&gt;Estimating C1&lt;/h3&gt;
&lt;p&gt;After estimating conversion and non-conversion, C1 needs to be estimated. This can be considered as one of the major KPI for the period.&lt;/p&gt;
&lt;h4 id="c1-formula"&gt;C1 formula&lt;/h4&gt;
&lt;p&gt;ะก1 = [N of contracts signed] / [N of Demo requests]&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;## The [N of Demo requests] is estimated below

request_total = conversion_total[&amp;#39;total_conversion&amp;#39;].sum()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;request_total&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;## C1 
C1 = conversion_total.iloc[[0],[1]] / request_total&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;C1&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;C1.rename(index=str, columns={&amp;quot;total_conversion&amp;quot;: &amp;quot;C1&amp;quot;})&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="thus-c1-is-estimated-to-be-0.5018."&gt;Thus, C1 is estimated to be 0.5018.&lt;/h4&gt;
&lt;p&gt;It is concluded that conversion rate in percentage terms if 50.2%&lt;/p&gt;
&lt;h4 id="disaagregating-conversion-for-indepth-analysis"&gt;Disaagregating conversion for indepth analysis&lt;/h4&gt;
&lt;p&gt;In order to better understand conversion, there is the need to explore the data based on certain dimensions.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;### group data based on company type and count total conversion for #eash 
company_conversion = df_dataframe &amp;gt;&amp;gt; siuba.group_by(_.company_group, _.conversion) &amp;gt;&amp;gt; siuba.summarize(total_count = _.conversion.count())

#df_dplyselect.groupby([&amp;#39;company_group&amp;#39;, #&amp;#39;conversion&amp;#39;])[&amp;#39;conversion&amp;#39;].count()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;company_conversion&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;(ggplot(company_conversion, aes(x=&amp;#39;company_group&amp;#39;, y=&amp;#39;total_count&amp;#39;, fill=&amp;#39;conversion&amp;#39;))
 + geom_col(stat=&amp;#39;identity&amp;#39;, position=&amp;#39;dodge&amp;#39;)) + theme_dark() + ggtitle(&amp;#39;Conversion based on type of company&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://addurl//posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-3.png" width="614" /&gt;&lt;/p&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="from-our-research-questions-and-hypothesis-conversion-based-on-sales-script-type-is-will-offer-valuable-insight-hence-the-data-is-grouped-and-conversion-is-estimated-and-visualized-for-the-different-sales-group-before-testing-their-hypothesis-further."&gt;From our research questions and hypothesis, conversion based on sales script type is will offer valuable insight hence the data is grouped and conversion is estimated and visualized for the different sales group before testing their hypothesis further.&lt;/h4&gt;
&lt;pre class="python"&gt;&lt;code&gt;## group data based on type of sales script and count total conversion 
script_conversion = (df_dataframe
 &amp;gt;&amp;gt; siuba.group_by(_.sales_script_type, _.conversion)
&amp;gt;&amp;gt; siuba.summarize(total_conversion = _.conversion.count())
)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;script_conversion&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h5 id="section"&gt;&lt;/h5&gt;
&lt;p&gt;The result of the table can be visualize below&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;### Plot the total conversion based on script type

(ggplot(script_conversion, aes(x=&amp;#39;sales_script_type&amp;#39;, y=&amp;#39;total_conversion&amp;#39;, fill=&amp;#39;conversion&amp;#39;))
 + geom_col(stat=&amp;#39;identity&amp;#39;, position=&amp;#39;dodge&amp;#39;)) + theme_dark() + ggtitle(&amp;#39;Conversion based on type of sales script&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://addurl//posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-5.png" width="614" /&gt;&lt;/p&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h5 id="insights-from-the-visuals"&gt;Insights from the visuals&lt;/h5&gt;
&lt;p&gt;Illustrating conversion based on script type shows that both script A and script C made a higher conversion compared to non-conversion. Script A made 83 more conversions than non-conversion while script C made 7 more conversion than non-conversion. On the contrary, script B made 54 less conversions compared to non-conversion.&lt;/p&gt;
&lt;p&gt;While this difference gives a clue about performance of the various script, it does not enables us to make decisive conclusion but guesses of what the difference could result in. Foreinstance, the total conversion is summation and hence the difference could be the result of number of demo sessions that a script has been used for. Clarity needs to brought to such guessetimates by considering their mean through further analysis&lt;/p&gt;
&lt;p&gt;In order to make a data driven decision, hypothesis need to be tested to derive better understanding base on statistical significance.&lt;/p&gt;
&lt;h3 id="objective-1"&gt;Objective 1&lt;/h3&gt;
&lt;p&gt;To test the hypothesis that there is statistically significant relationship between type of sales script and conversion.&lt;/p&gt;
&lt;p&gt;Proceeding from the insights gained, this section tests the hypothesis for the first objective&lt;/p&gt;
&lt;p&gt;H0 Conversion is independent of type of sales script used&lt;/p&gt;
&lt;p&gt;H1 Conversion is dependent on type of sales script used&lt;/p&gt;
&lt;h4 id="method-of-analysis"&gt;Method of analysis&lt;/h4&gt;
&lt;p&gt;Chi squared test of independence is appropriate for assessing whether there is a relationship between two categorical variable hence used. The procedure involves producing a contigency table and using that for the analysis. This is demonstrated below.&lt;/p&gt;
&lt;h5 id="contigency-table"&gt;Contigency table&lt;/h5&gt;
&lt;pre class="python"&gt;&lt;code&gt;
## contigency table between sales script type and conversion

conversion_script_type_contengency = pd.crosstab(df_dataframe[&amp;#39;sales_script_type&amp;#39;], df_dataframe[&amp;#39;conversion&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;conversion_script_type_contengency&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;### chi-square test of independence
chi_square_result = stat()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;chi_square_result.chisq(df=conversion_script_type_contengency)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;print(chi_square_result.summary)
&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="results-for-objective-one"&gt;Results for objective one&lt;/h3&gt;
&lt;p&gt;With a p-value of 0.3279 being greater than 0.05 (5% significance level), it is suggested that there is no statistically significant relationship between type of sales script and conversion. Thus, we fail to reject the null hypothesis of independence based on available evidence.&lt;/p&gt;
&lt;p&gt;This result has an added twist to it, which is that, there is the possibility of a change in result when more and better data is acquired.&lt;/p&gt;
&lt;p&gt;A major research gap that remains is whether the differences in conversion between scripts as deduced from the bar plots is significant. This requires the need to test another hypothesis hence research objective 2.&lt;/p&gt;
&lt;h3 id="research-objective-2-to-test-the-hypothesis-that-difference-in-mean-conversion-among-sales-script-are-equal"&gt;Research objective 2: To test the hypothesis that difference in mean conversion among sales script are equal&lt;/h3&gt;
&lt;p&gt;In order to test this hypothesis, there is the need to have continuous varaible. For this, the total number of conversions on daily basis can analyzed and used as a continuous variable. The rational for estimating daily total conversions instead of monthly or yearly is to ensure that there are enough data points to make statistical inference.&lt;/p&gt;
&lt;p&gt;The available data covers only a year and a couple of days, hence daily conversions is a logical timeframe for estimating total conversion.&lt;/p&gt;
&lt;p&gt;By this, the dataset needs to be grouped based on days and the sum of conversions estimated for each sales script type. The question that arise is how are the conversions to be counted? For this, โis_signedโ variable is used; where its boolean data type (true or false) are treated as intergers with 1 counted as a single conversion and 0 as no conversion for each demo session. This allows for the total daily conversion to be estimated.&lt;/p&gt;
&lt;p&gt;Another question is, which of the dates should be used as a basis for counting the total daily conversion? For this, the demo_appointment_datetime variable was used. This is based on the context that โduring and after the demo session, the sales manager tries to convert the potential client into a contract signingโ hence the assumption that the impact of the script used on conversion came into effect on the demo appointment day.&lt;/p&gt;
&lt;p&gt;It is assummed that the date used will be of less relevance for testing the hypothesis despite there could changes in the total number of daily conversion for scripts when the date is change. But the impact is assummed to be negligible and again, less relevant to some extent.&lt;/p&gt;
&lt;h3 id="key-assumption"&gt;Key assumption&lt;/h3&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;The assumption was made that all sales scripts had equal chance of being used during a demo session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were no cases of repeated sessions where scripts were used again.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="python"&gt;&lt;code&gt;### select various columns and split the demo appointment column into date and time
df_grp = (df &amp;gt;&amp;gt; siuba.select(_.demo_appointment_datetime, _.request_to_1streach_timelength_minutes_, 
                  _.conversion, _.company_group, _.sales_script_type, _.is_signed)&amp;gt;&amp;gt;
siuba.separate(col = _.demo_appointment_datetime, sep = &amp;#39; &amp;#39;, into = (&amp;#39;demo_appointment_yyyymmdd&amp;#39;, 
                                                                     &amp;#39;demo_appointment_hhmmss&amp;#39;)) &amp;gt;&amp;gt;
 siuba.group_by(_.demo_appointment_yyyymmdd, _.sales_script_type)
)

## sum the total conversion for each script on each day&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;df_grp_sum = df_grp &amp;gt;&amp;gt; siuba.summarize(total_conversion = _.is_signed.sum())&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;df_grp_sum.head(5)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="visualizing-the-total-conversion-on-demo-day-for-the-various-scripts"&gt;Visualizing the total conversion on demo day for the various scripts&lt;/h4&gt;
&lt;p&gt;First, the distribution of total conversion based on sales script is visualized using boxplot which shows the mean conversion for sales scripts as well as the minimum, 25th quartile, 75th quartile and maximum.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;
(ggplot(data = df_grp_sum, mapping = aes(x = &amp;#39;sales_script_type&amp;#39;, y = &amp;#39;total_conversion&amp;#39;))+ geom_boxplot() + 
 ggtitle(&amp;#39;Total conversion by script type (based on conversion counts of demo day)&amp;#39;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://addurl//posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-7.png" width="614" /&gt;&lt;/p&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="insights-from-boxplot-of-total-conversions-based-on-demo-date"&gt;Insights from boxplot of total conversions based on demo date&lt;/h4&gt;
&lt;p&gt;From the boxplot, some points which are outside the normal range of the plot can be regarded as outliers. However, they are not remove for now. Moreover the difference in conversion between scripts is clearer with the boxplot. It is deduced that script C has the lowest average conversion while script A has the highest.&lt;/p&gt;
&lt;h4 id="visual-inspection-testing-statistical-assumptions-for-the-analysis-of-hypothesis"&gt;Visual inspection: Testing statistical assumptions for the analysis of hypothesis&lt;/h4&gt;
&lt;p&gt;Before deciding on the statistical method to use to answer the business questions, there is the need to verify that statistical assumptions hold true for the data. For valid statistical inference to be made about our target market based on our current of clients it is very important that appropriate methods are used. The appropriateness of the method is not a guesswork but one informed from both visual and statistical test.&lt;/p&gt;
&lt;p&gt;Generally, there are two family of statistical techniques that can be employed in analyzing the data. Namely, Parametric and non-parametric methods. The parametric methods usually have a greater statistical power but this comes at the cost of requiring the data to meet a number of assumptions for proper insights to be gain. Given that, our aim is to present the possible best solution, the assumptions for using a parametric method are tested first before considering their use or otherwise.&lt;/p&gt;
&lt;h4 id="visual-inspection-of-normality"&gt;Visual inspection of normality&lt;/h4&gt;
&lt;p&gt;To use a parametric method, normality of data distribution of is assummed. A simple approach to verifying this is with the aid of histogram&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;sns.histplot(df_grp_sum[&amp;#39;total_conversion&amp;#39;], bins=20, kde=True, color=&amp;#39;g&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="results-of-the-histogram"&gt;Results of the histogram&lt;/h4&gt;
&lt;p&gt;The histogram plotted above does not necessarily answer the question on normality assumption. Nonetheless, it is one of several visualization techniques that gives clues.&lt;/p&gt;
&lt;p&gt;From visual inspection, the distribution is right-tailed hence a right-skewed or positive-skewed distribution.&lt;/p&gt;
&lt;h3 id="q-q-plot-for-visualizing-normality"&gt;Q-Q plot for visualizing normality&lt;/h3&gt;
&lt;p&gt;In order to gain a better view on the normality of the distribution, a Q-Q plot is use to compare actual total conversion to an expected value in a normal distribution. The yardstick for detecting normality will be to verify that the actual data distriubtion are linearly along a straignt 45 degrees diagonal line. The result is illustrated below.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;### QQ-PLOT
sm.qqplot(df_grp_sum[&amp;#39;total_conversion&amp;#39;], line = &amp;#39;45&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;plt.title(&amp;#39;Q-Q plot for total conversion&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://addurl//posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-9.png" width="624" /&gt;&lt;/p&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="insights-from-q-q-plot"&gt;Insights from Q-Q plot&lt;/h3&gt;
&lt;p&gt;From the Q-Q plot, it is deduced that the dataset deviates from the line of expected normal distribution hence heavily skewed. While the visualization so far points to the direction of a non-normal distribution, there is still the opportunity to cross-check these suggestions with some statistically test for normality.&lt;/p&gt;
&lt;h3 id="statistically-test-for-normality-shapiro-wilk-test-of-normality"&gt;Statistically test for normality: Shapiro-Wilk test of normality&lt;/h3&gt;
&lt;p&gt;The visual inspections are supported with Shapiro-Wilk test to test the hypothesis that the distribution of data is not different from an expected normal distribution.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;#### Shapiro-Wilk test

w, pvalue = stats.shapiro(df_grp_sum[&amp;#39;total_conversion&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;print(w, pvalue)


#w, pvalue = stats.shapiro(script_anova.anova_model_out.resid)
#print(w, pvalue)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="calculating-normality"&gt;Calculating normality&lt;/h4&gt;
&lt;p&gt;This another approach is to assessing normality using the pingouin module.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;pg.normality(df_grp_sum, group=&amp;#39;sales_script_type&amp;#39;, dv=&amp;#39;total_conversion&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="insight-from-shapiro-wilk-test-of-normality"&gt;Insight from Shapiro-Wilk test of normality&lt;/h4&gt;
&lt;p&gt;The p-value of the test is less than 0.05 (5% significance level) which suggests a statistically significant difference from a normal distribution. Thus, the null hypothesis is rejected. This is not one of the relevant hypothesis to be tested for our products but its gives us an important clue as to the right statistical method to adopt for assessing our business relevant hypothesis.&lt;/p&gt;
&lt;p&gt;With the data failing to meet the assumption of normal distribution required for the adoption of a parametric method, the compass of the analysis is gearing towards a non-parametric method. But before ascertaining that, there is the need to test for other assumptions required such as homogeneity which stipulates that variance between categories to analyzed should be equal across the data distribution for methods such ANOVA to be properly use.&lt;/p&gt;
&lt;h3 id="statistical-test-for-homogeneity"&gt;Statistical test for homogeneity&lt;/h3&gt;
&lt;h4 id="bartletts-test"&gt;Bartlettโs test&lt;/h4&gt;
&lt;p&gt;The first approach being used to test for equal variance in the distribution is the Bartlettโs test. Given that the distribution is non-normal, Barlettโs test is supported with Leveneโs test which is a much more robust test when the data is not a normal distribution.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;### bartlett&amp;#39;s test for homogeneity
script_bartlett = stat()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;script_bartlett.bartlett(df = df_grp_sum, res_var = &amp;#39;total_conversion&amp;#39;, xfac_var = &amp;#39;sales_script_type&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;script_bartlett.bartlett_summary&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h5 id="insight-from-the-bartletts-test"&gt;Insight from the Bartlettโs test&lt;/h5&gt;
&lt;p&gt;The bartlett test result shows a p-value that is statistically significant hence the hypothesis that variation in the distribution is equal is rejected. This points in the direction of a non-parametric approach for the analysis but before then the result needs to be verified with a Leveneโs test.&lt;/p&gt;
&lt;h3 id="levenes-statistical-test-for-homogeneity"&gt;Leveneโs statistical test for homogeneity&lt;/h3&gt;
&lt;p&gt;Leveneโs test is employed as a final approach in this context to verify whether not the variance in the data is equal.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;## levene test
script_lev = stat()&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;script_lev.levene(df = df_grp_sum, res_var=&amp;#39;total_conversion&amp;#39;, xfac_var = &amp;#39;sales_script_type&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;script_lev.levene_summary&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;pre class="python"&gt;&lt;code&gt;### Usingthe pingouin module for the analysis

pg.homoscedasticity(df_grp_sum, group=&amp;#39;sales_script_type&amp;#39;, dv=&amp;#39;total_conversion&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="insight-from-levenes-test"&gt;Insight from Leveneโs test&lt;/h3&gt;
&lt;p&gt;The leveneโs test depict an unequal variance with a statistical significant p-value &amp;lt; 0.05 (at 5% significant level) hence confirming Bartlettโs test.&lt;/p&gt;
&lt;h2 id="conclusion-drawn-from-testing-of-statistical-assumptions"&gt;Conclusion drawn from testing of statistical assumptions&lt;/h2&gt;
&lt;p&gt;With visual inspections and all statistically tests indicating the data has a non-normal distribution and variance of values are unequal, the statistical approach adopted for testing the various relevant hypothesis devised is a non-parametric one.&lt;/p&gt;
&lt;h2 id="kruskal-wallis-test"&gt;Kruskal-Wallis test&lt;/h2&gt;
&lt;p&gt;After finally deciding on the type of statiscal approach to adopt, a selection is made among several non-parametric methods. For this, consideration is given to the number of categories or groupings in the independent variable. Three types of sales scripts were identified in the datset hence the decision to use Kruskal-Wallis test for the analysis of the second objective.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;pg.kruskal(data=df_grp_sum, dv=&amp;#39;total_conversion&amp;#39;, between=&amp;#39;sales_script_type&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="results"&gt;Results&lt;/h3&gt;
&lt;p&gt;The p-value from the Kruskal-Wallis test is statistically significant at 5% significant level which suggests the null hypothesis that conversion among the differenct scripts is rejected.&lt;/p&gt;
&lt;h3 id="conclusion-on-objective-2"&gt;Conclusion on objective 2&lt;/h3&gt;
&lt;p&gt;The objective 2 seeks to test the hypothesis that all sales scripts produce equal conversions without statistically significant difference. The conclusion drawn is to reject this hypothesis. This can be seen as a breakthrough from the exploratory data analysis yet this results equally raise another enquiry. Though, it is now clear that at least one sales script seems to do better than another for conversion, the analysis does not indicate which sales scripts has a higher conversion and how they differ. This calls for further analysis in the form of post-hoc test.&lt;/p&gt;
&lt;h3 id="recommendation-on-objective-2"&gt;Recommendation on objective 2&lt;/h3&gt;
&lt;p&gt;With the suggestion that sales script donot produce equal conversions, it is recommended that, a deliberate effort is made to choose the script with higher rate of conversion. While this recommendation indicates there is opportunity to prioritize sales scripts for higher conversion, it has not specifically suggested which sales script in particular should be used. To provide such a data driven recommendation, further analysis is required to determine which script should be used to maximize conversion.&lt;/p&gt;
&lt;h3 id="objective-3-to-identify-which-sales-script-produces-higher-total-conversions-on-the-average"&gt;Objective 3: To identify which sales script produces higher total conversions on the average&lt;/h3&gt;
&lt;p&gt;Post-hoc test is used to satisfy this objective. It provides a better insight through a pairwise comparison of the significant level of differences in conversion between scripts and further identify which scripts are assosiated with higher conversion.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;### Post-hoc test with Dunn

sp.posthoc_dunn(a = df_grp_sum, val_col = &amp;#39;total_conversion&amp;#39;, group_col = &amp;#39;sales_script_type&amp;#39;, p_adjust=&amp;#39;bonferroni&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h3 id="result-of-post-hoc-test-of-difference-in-conversion"&gt;Result of post-hoc test of difference in conversion&lt;/h3&gt;
&lt;p&gt;The post-hoc test based on Dunn test indicates that there are significant differences in conversion between all the sales scripts and not just at least one. The p-value for the pairwise difference between all the scripts are statistically significant. The result shown above only captures the p-values and in order discern the difference better, another module is used for the estimation.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;## Post-hoc test with means of script among other feature output
pg.pairwise_ttests(dv=&amp;#39;total_conversion&amp;#39;, between=&amp;#39;sales_script_type&amp;#39;, data=df_grp_sum, parametric = &amp;#39;false&amp;#39;,
                  alpha = 0.05, padjust = &amp;#39;bonf&amp;#39;, return_desc = &amp;#39;true&amp;#39;).round(3)&lt;/code&gt;&lt;/pre&gt;
function (...) 
{
    dots &lt;- py_resolve_dots(list(...))
    result &lt;- py_call_impl(callable, dots$args, dots$keywords)
    if (convert) 
        result &lt;- py_to_r(result)
    if (is.null(result)) 
        invisible(result)
    else result
}
&lt;h4 id="interpretation-of-post-hoc-rest-results"&gt;Interpretation of post-hoc rest results&lt;/h4&gt;
&lt;p&gt;From the post-hoc test results, the mean of script B is 4.333, mean of script A is 8.342 and the mean of script c is 0.638. The results suggests sales script A has a significantly higher conversion than sales script B and C. In a similar manner, sales script B has a significantly higher conversion than script C in statistical terms.&lt;/p&gt;
&lt;h3 id="conclusion-drawn-for-objective-3"&gt;Conclusion drawn for objective 3&lt;/h3&gt;
&lt;p&gt;The third objective seeks to assess whether difference in conversion is statistically significant and identify which sales script has a significantly higher conversion. The results based on available data suggests that on a given demo day, the number of conversion that sales script A will produce is on the average, significantly higher than the other script types hence should be prioritize in our efforts to increase conversion&lt;/p&gt;
&lt;h3 id="recommendation-for-objective-3"&gt;Recommendation for objective 3&lt;/h3&gt;
&lt;p&gt;The sales team should consider prioritizing script A as the best bet to attain a higher conversion rate.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>1d32d394ae9e319cb57d5cfadb066d34</distill:md5>
      <guid>https://addurl/posts/2022-09-03-product-analysis-report</guid>
      <pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate>
      <media:content url="https://addurl/posts/2022-09-03-product-analysis-report/product-analysis-report_files/figure-html5/unnamed-chunk-1-1.png" medium="image" type="image/png" width="1228" height="921"/>
    </item>
    <item>
      <title>Timeseries benchmark models</title>
      <dc:creator>Linus Agbleze</dc:creator>
      <link>https://addurl/posts/2022-07-18-timeseries-benchmark-models</link>
      <description>This post entails timeseries prediction with 
very simple models that serve as benchmark against 
which more advance models .</description>
      <category>Timeseries analysis</category>
      <guid>https://addurl/posts/2022-07-18-timeseries-benchmark-models</guid>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Hierarchical clustering -- Which states in Nigeria have similar expenditure profile?</title>
      <dc:creator>Linus Agbleze</dc:creator>
      <link>https://addurl/posts/2022-07-20-hierarchical-clustering-which-states-in-nigeria-have-similar-expenditure-profile</link>
      <description>Clustering analysis is popular unsupervised machine 
learning techniques that categorize data into groups of similarity.</description>
      <category>Unsupervised learning</category>
      <guid>https://addurl/posts/2022-07-20-hierarchical-clustering-which-states-in-nigeria-have-similar-expenditure-profile</guid>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://addurl/posts/2022-07-20-hierarchical-clustering-which-states-in-nigeria-have-similar-expenditure-profile/hierarchical-clustering-which-states-in-nigeria-have-similar-expenditure-profile_files/figure-html5/customize-dendro-1.png" medium="image" type="image/png" width="1536" height="1152"/>
    </item>
    <item>
      <title>Data visualization</title>
      <dc:creator>Linus Agbleze</dc:creator>
      <link>https://addurl/posts/2022-07-17-data-visualization</link>
      <description>This post entails the use of ggplot for data visualization.</description>
      <category>visualization</category>
      <guid>https://addurl/posts/2022-07-17-data-visualization</guid>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://addurl/posts/2022-07-17-data-visualization/data-visualization_files/figure-html5/unnamed-chunk-1-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Welcome to Datasiast!</title>
      <dc:creator>Linus Agbleze</dc:creator>
      <link>https://addurl/posts/welcome</link>
      <description>Datasiast exists for enthusiatic data science knowledge sharing and practice.</description>
      <guid>https://addurl/posts/welcome</guid>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
